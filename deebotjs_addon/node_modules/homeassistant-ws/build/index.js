"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __importDefault(require("events"));
var isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
var defaultOptions = {
    protocol: 'ws',
    host: 'localhost',
    port: 8123,
    path: '/api/websocket',
    messageSerializer: function (outgoingMessage) { return JSON.stringify(outgoingMessage); },
    messageParser: function (incomingMessage) {
        return JSON.parse(incomingMessage.data);
    },
    // A method that returns a websocket instance. Can be overriden to use a custom behavior:
    ws: function (opts) {
        return new isomorphic_ws_1.default(opts.protocol + "://" + opts.host + ":" + opts.port + opts.path);
    },
};
var command = function (commandArgs, client) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                var id = client.seq;
                client.resultMap[id] = function (resultMessage) {
                    if (resultMessage.success)
                        resolve(resultMessage.result);
                    else
                        reject(new Error(resultMessage.error.message));
                    // We won't need this callback again once we use it:
                    delete client.resultMap[id];
                };
                client.ws.send(client.options.messageSerializer(__assign(__assign({}, commandArgs), { id: id })));
                // Increment the shared message id sequence:
                client.seq++;
            })];
    });
}); };
var binaryResultTransform = function (result) {
    return {
        content_type: result.content_type,
        content: Buffer.from(result.content, 'base64'),
    };
};
var messageHandler = function (client) {
    return function (wsMessage) {
        var message = client.options.messageParser(wsMessage);
        // Emit an event for any message under a main 'message' listener:
        client.emitter.emit('message', message);
        // Emit an event for any message of any type:
        if (message.type)
            client.emitter.emit(message.type, message);
        // Emit an event for event-type messages:
        if (message.type === 'event' && message.event.event_type) {
            client.emitter.emit(message.event.event_type, message.event);
        }
        // If this is a result message, match it with the results map on the client
        // and call the matching function:
        if (message.id && message.type === 'result') {
            if (typeof client.resultMap[message.id] !== 'undefined') {
                client.resultMap[message.id](message);
            }
        }
    };
};
var clientObject = function (client) {
    return {
        rawClient: client,
        getStates: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, command({ type: 'get_states' }, client)];
        }); }); },
        getServices: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, command({ type: 'get_services' }, client)];
        }); }); },
        getPanels: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, command({ type: 'get_panels' }, client)];
        }); }); },
        getConfig: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, command({ type: 'get_config' }, client)];
        }); }); },
        on: function (eventId, cb) {
            client.emitter.on(eventId, cb);
        },
        callService: function (domain, service, additionalArgs) {
            if (additionalArgs === void 0) { additionalArgs = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, command({
                            type: 'call_service',
                            domain: domain,
                            service: service,
                            service_data: additionalArgs,
                        }, client)];
                });
            });
        },
        getMediaPlayerThumbnail: function (entityId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, command({
                            type: 'media_player_thumbnail',
                            entity_id: entityId,
                        }, client).then(binaryResultTransform)];
                });
            });
        },
        getCameraThumbnail: function (entityId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, command({
                            type: 'camera_thumbnail',
                            entity_id: entityId,
                        }, client).then(binaryResultTransform)];
                });
            });
        },
    };
};
var connectAndAuthorize = function (client, resolveWith) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                client.ws.onmessage = messageHandler(client);
                client.ws.onerror = function (err) {
                    // Unlikely for a listener to exist at this stage, but just in case:
                    client.emitter.emit('ws_error', err);
                    reject(err);
                };
                // Pass-through onclose events to the client:
                client.ws.onclose = function (event) {
                    return client.emitter.emit('ws_close', event);
                };
                client.emitter.on('auth_ok', function () {
                    // Immediately subscribe to all events, and return the client handle:
                    command({ type: 'subscribe_events' }, client)
                        .then(function () { return resolve(resolveWith); })
                        .catch(function (err) { return reject(err); });
                });
                client.emitter.on('auth_invalid', function (msg) {
                    return reject(new Error(msg.message));
                });
                client.emitter.on('auth_required', function () {
                    // If auth is required, immediately reject the promise if no token was provided:
                    if (!client.options.token) {
                        reject(new Error('Homeassistant requires authentication, but token not provided in options'));
                    }
                    client.ws.send(client.options.messageSerializer({
                        type: 'auth',
                        access_token: client.options.token,
                    }));
                });
            })];
    });
}); };
function createClient(callerOptions) {
    if (callerOptions === void 0) { callerOptions = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var options, client;
        return __generator(this, function (_a) {
            options = __assign(__assign({}, defaultOptions), callerOptions);
            client = {
                seq: 1,
                options: options,
                resultMap: {},
                emitter: new events_1.default(),
                ws: options.ws(options),
            };
            return [2 /*return*/, connectAndAuthorize(client, clientObject(client))];
        });
    });
}
exports.default = createClient;

/// <reference types="node" />
import EventEmitter from 'events';
import WebSocket from 'isomorphic-ws';
export declare type HassWsOptions = {
    protocol: 'ws' | 'wss';
    host: string;
    port: number;
    path: string;
    token: string;
    messageSerializer: (outgoingMessage: any) => string;
    messageParser: (incomingMessage: MessageEvent) => any;
    ws: (opts: HassWsOptions) => WebSocket;
};
declare type HassClient = {
    seq: number;
    options: HassWsOptions;
    resultMap: {
        [resultId: number]: any;
    };
    emitter: EventEmitter;
    ws: WebSocket;
};
export declare type EventListener = (...args: any[]) => void;
export declare type EventType = string | symbol;
export declare type HassApi = {
    rawClient: HassClient;
    getStates: () => Promise<any[]>;
    getServices: () => Promise<any[]>;
    getPanels: () => Promise<any[]>;
    getConfig: () => Promise<{}>;
    getMediaPlayerThumbnail: (entityId: string) => Promise<{}>;
    getCameraThumbnail: (entityId: string) => Promise<{}>;
    on: (eventType: EventType, cb: EventListener) => void;
    callService: (domain: string, service: string, extraArgs?: any) => Promise<any>;
};
export default function createClient(callerOptions?: Partial<HassWsOptions>): Promise<HassApi>;
export {};
